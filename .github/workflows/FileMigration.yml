name: Sync Migrations from Test to Demo

on:
  push:
    branches:
      - test  # Se ejecuta cuando hay un push en la rama "test"

permissions:
  contents: write  # Permiso para escribir en el repo

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Obtener todo el historial para comparación

      - name: Configure Git user
        run: |
          git config --global user.name "kravmaga95"
          git config --global user.email "edwardsalex8034@gmail.com"

      - name: Authenticate Git
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Ensure test branch is up-to-date
        run: |
          git checkout test
          git pull --ff-only origin test || { echo "Error pulling test branch"; exit 1; }

      - name: Check for migration files in test
        run: |
          # Verifica que la carpeta test/migrations exista desde la raíz del repositorio
          if [ -d "test/migrations" ] && [ "$(ls -A test/migrations)" ]; then
            echo "Migrations folder found in test."
          else
            echo "No migrations found in test, skipping."
            exit 1
          fi

      - name: Switch to demo branch
        run: |
          git fetch origin demo
          git checkout demo || git checkout -b demo origin/demo
          git pull --ff-only origin demo || { echo "Error pulling demo branch"; exit 1; }

      - name: Ensure migrations folder exists in demo
        run: |
          # Asegura que la carpeta demo/migrations existe, si no, la crea
          if [ ! -d "demo/migrations" ]; then
            mkdir -p demo/migrations  # Crea la carpeta si no existe en demo
            echo "Created migrations folder in demo."
          fi

      - name: Copy migrations from test branch to demo branch
        run: |
          # Copia los archivos de test/migrations a demo/migrations solo si no existen en demo
          echo "Copying migration files from test to demo..."
          rsync -av --ignore-existing test/migrations/ demo/migrations/  # Solo copia archivos que no existen en demo/migrations

      - name: Commit and push changes
        run: |
          git add demo/migrations/*  # Asegura que solo los archivos de migrations se agreguen
          if git diff --cached --quiet; then
            echo "No changes detected, skipping commit."
          else
            git commit -m "Sync migration files from test to demo"
            git push origin demo || { echo "Push failed"; exit 1; }
          fi
